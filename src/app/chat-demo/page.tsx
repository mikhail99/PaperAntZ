'use client'

import React, { useState } from 'react'
import { AgentChat, DocumentChat, ChatProvider, useFileManager } from '@/components/chat'
import { AgentType, ChatMessage, ChatFile } from '@/types/chat'
import { Button } from '@/components/ui/button'
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card'
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs'
import { FileTextIcon, BotIcon } from 'lucide-react'

// Sample document for demo
const sampleDocument = {
  id: 'doc-1',
  title: 'Sample Research Paper',
  content: 'This is a sample research paper content...',
  type: 'pdf',
  size: 1024 * 1024, // 1MB
  uploadedAt: new Date(),
  source: 'upload' as const
}

// Sample files for testing @ functionality
const sampleFiles = [
  {
    id: 'file-1',
    name: 'research-data.csv',
    type: 'text/csv',
    size: 256 * 1024, // 256KB
    url: '#',
    content: '',
    uploadedAt: new Date(),
    source: 'upload' as const
  },
  {
    id: 'file-2',
    name: 'analysis-report.pdf',
    type: 'application/pdf',
    size: 512 * 1024, // 512KB
    url: '#',
    content: '',
    uploadedAt: new Date(),
    source: 'upload' as const
  },
  {
    id: 'file-3',
    name: 'chart-image.png',
    type: 'image/png',
    size: 128 * 1024, // 128KB
    url: '#',
    content: '',
    uploadedAt: new Date(),
    source: 'upload' as const
  },
  {
    id: 'file-4',
    name: 'code-script.py',
    type: 'text/x-python',
    size: 64 * 1024, // 64KB
    url: '#',
    content: '',
    uploadedAt: new Date(),
    source: 'upload' as const
  },
  {
    id: 'file-5',
    name: 'planning-output.md',
    type: 'text/markdown',
    size: 32 * 1024, // 32KB
    url: '#',
    content: '',
    uploadedAt: new Date(),
    source: 'generated' as const,
    generatedBy: 'Planning Agent'
  }
]

export default function ChatDemo() {
  const [messages, setMessages] = useState<ChatMessage[]>([])
  const [selectedAgent, setSelectedAgent] = useState<AgentType | null>(null)
  const [isChatLoading, setIsChatLoading] = useState(false)
  const { files, addFile, addGeneratedFile } = useFileManager()

  const agents: AgentType[] = [
    {
      id: 'planning',
      name: 'Planning Agent',
      description: 'Creates research plans and outlines',
      color: 'blue',
      icon: 'target'
    },
    {
      id: 'research',
      name: 'Research Agent',
      description: 'Conducts in-depth research and analysis',
      color: 'green',
      icon: 'brain'
    },
    {
      id: 'writing',
      name: 'Writing Agent',
      description: 'Writes and drafts research reports',
      color: 'purple',
      icon: 'file-edit'
    },
    {
      id: 'review',
      name: 'Review Agent',
      description: 'Reviews and refines final reports',
      color: 'orange',
      icon: 'users'
    }
  ]

  const handleAgentSelect = (agent: AgentType) => {
    setSelectedAgent(agent)
  }

  const handleAgentExecute = async (agent: AgentType, message: string, files: File[]) => {
    setIsChatLoading(true)
    
    // Add user message
    const userMessage: ChatMessage = {
      id: Date.now().toString(),
      role: 'user',
      content: message,
      timestamp: new Date(),
    }
    setMessages(prev => [...prev, userMessage])

    try {
      // Simulate agent execution
      await new Promise(resolve => setTimeout(resolve, 2000))
      
      const response = `${agent.name} has processed your request: "${message}". 

This is a simulated response demonstrating how the agent would work. In a real implementation, this would connect to your backend AI services.

The agent has analyzed your input and any provided files to generate this response. Each agent specializes in different aspects of the research workflow:

- **Planning Agent**: Creates structured research plans
- **Research Agent**: Conducts in-depth analysis and data gathering
- **Writing Agent**: Generates well-structured reports and documents
- **Review Agent**: Ensures quality and accuracy of outputs

The agent's output has been saved as a generated file for use in subsequent steps.`

      // Add agent response
      const agentMessage: ChatMessage = {
        id: (Date.now() + 1).toString(),
        role: 'assistant',
        content: response,
        timestamp: new Date(),
        agentId: agent.id,
        agentName: agent.name,
        agentIcon: agent.icon,
        metadata: {
          agentId: agent.id,
          agentName: agent.name,
        }
      }
      setMessages(prev => [...prev, agentMessage])

      // Create generated file
      const generatedFileName = `${agent.id}-output-${Date.now()}.md`
      const generatedContent = `# ${generatedFileName}

Generated by ${agent.name}

## Input
${message}

## Response
${response}

---
Generated at: ${new Date().toISOString()}`
      
      const generatedFile = addGeneratedFile(generatedFileName, generatedContent, agent.name)

    } catch (error) {
      console.error('Agent execution failed:', error)
      
      const errorMessage: ChatMessage = {
        id: (Date.now() + 1).toString(),
        role: 'assistant',
        content: 'Sorry, I encountered an error while processing your request. Please try again.',
        timestamp: new Date(),
        agentId: agent.id,
        agentName: agent.name,
        agentIcon: agent.icon,
        metadata: {
          agentId: agent.id,
          agentName: agent.name,
          error: true,
        }
      }
      setMessages(prev => [...prev, errorMessage])
    } finally {
      setIsChatLoading(false)
    }
  }

  const handleDocumentUpdate = (updates: any) => {
    console.log('Document updated:', updates)
  }

  const handleFileSelect = (files: File[]) => {
    files.forEach(file => addFile(file, 'upload'))
  }

  return (
    <ChatProvider>
      <div className="min-h-screen bg-gray-50 p-8">
        <div className="max-w-7xl mx-auto">
          <div className="mb-8">
            <h1 className="text-3xl font-bold text-gray-900 mb-2">
              Chat Components Demo
            </h1>
            <p className="text-gray-600">
              Explore the different chat interfaces built for the AI Research Assistant
            </p>
          </div>

          <Tabs defaultValue="agent-chat" className="space-y-6">
            <TabsList className="grid w-full grid-cols-2">
              <TabsTrigger value="agent-chat" className="flex items-center gap-2">
                <BotIcon className="h-4 w-4" />
                Agent Chat
              </TabsTrigger>
              <TabsTrigger value="document-chat" className="flex items-center gap-2">
                <FileTextIcon className="h-4 w-4" />
                Document Chat
              </TabsTrigger>
            </TabsList>

            <TabsContent value="agent-chat" className="space-y-6">
              <Card>
                <CardHeader>
                  <CardTitle>Agent Chat Interface</CardTitle>
                  <p className="text-sm text-gray-600">
                    Control AI agents step-by-step to build research reports. Select an agent, provide instructions, and reference files using @.
                  </p>
                </CardHeader>
              </Card>

              <Card className="h-[calc(100vh-20rem)]">
                <CardContent className="p-0 h-full">
                  <AgentChat
                    messages={messages}
                    agents={agents}
                    selectedAgent={selectedAgent}
                    onAgentSelect={handleAgentSelect}
                    onAgentExecute={handleAgentExecute}
                    availableFiles={sampleFiles}
                    generatedFiles={sampleFiles.filter(f => f.source === 'generated')}
                    isLoading={isChatLoading}
                    onFileSelect={handleFileSelect}
                    placeholder="Select an agent and type instructions... Use @ to reference files"
                    className="h-full border-0 rounded-none"
                  />
                </CardContent>
              </Card>
            </TabsContent>

            <TabsContent value="document-chat" className="space-y-6">
              <Card>
                <CardHeader>
                  <CardTitle>Document Chat Interface</CardTitle>
                  <p className="text-sm text-gray-600">
                    Chat about documents with context-aware conversation. View, edit, and search document content.
                  </p>
                </CardHeader>
              </Card>

              <Card className="h-[calc(100vh-20rem)]">
                <CardContent className="p-0 h-full">
                  <DocumentChat
                    messages={[]}
                    onSendMessage={(message) => console.log('Document message:', message)}
                    onDocumentUpdate={handleDocumentUpdate}
                    document={sampleDocument}
                    contextFiles={files}
                    placeholder="Ask about this document..."
                    className="h-full border-0 rounded-none"
                  />
                </CardContent>
              </Card>
            </TabsContent>
          </Tabs>

          <div className="mt-8 grid gap-6 md:grid-cols-3">
            <Card>
              <CardHeader>
                <CardTitle className="text-lg">Features</CardTitle>
              </CardHeader>
              <CardContent>
                <ul className="space-y-2 text-sm">
                  <li>• Step-by-step agent control</li>
                  <li>• File reference system (@filename)</li>
                  <li>• Automatic file generation</li>
                  <li>• Real-time chat interface</li>
                  <li>• Document editing and search</li>
                  <li>• Multi-agent coordination</li>
                </ul>
              </CardContent>
            </Card>

            <Card>
              <CardHeader>
                <CardTitle className="text-lg">Use Cases</CardTitle>
              </CardHeader>
              <CardContent>
                <ul className="space-y-2 text-sm">
                  <li>• Research report generation</li>
                  <li>• Document analysis and Q&A</li>
                  <li>• Multi-agent workflows</li>
                  <li>• Collaborative research</li>
                  <li>• Content creation</li>
                  <li>• Quality assurance</li>
                </ul>
              </CardContent>
            </Card>

            <Card>
              <CardHeader>
                <CardTitle className="text-lg">Getting Started</CardTitle>
              </CardHeader>
              <CardContent>
                <div className="space-y-3 text-sm">
                  <p>
                    <strong>Agent Chat:</strong> Select an agent, type instructions, use @ to reference files.
                  </p>
                  <p>
                    <strong>Document Chat:</strong> Upload documents and chat about their content.
                  </p>
                  <Button 
                    variant="outline" 
                    size="sm" 
                    onClick={() => window.location.href = '/research/1'}
                    className="mt-3"
                  >
                    View in Research Context
                  </Button>
                </div>
              </CardContent>
            </Card>
          </div>
        </div>
      </div>
    </ChatProvider>
  )
}